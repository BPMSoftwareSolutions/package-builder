name: RenderX Mono-Repo CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/renderx-mono-repo/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/renderx-mono-repo/**'

jobs:
  lint_unit:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: cd packages/renderx-mono-repo && pnpm install
      
      - name: Lint
        run: cd packages/renderx-mono-repo && pnpm run lint
      
      - name: Type check
        run: cd packages/renderx-mono-repo && pnpm run typecheck
      
      - name: Run unit tests
        run: cd packages/renderx-mono-repo && pnpm run test
      
      - name: Build
        run: cd packages/renderx-mono-repo && pnpm run build
      
      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/renderx-mono-repo/coverage/coverage-final.json
          flags: renderx-mono-repo-unit
          fail_ci_if_error: false

  e2e_cypress:
    name: E2E Tests (Cypress)
    runs-on: ubuntu-latest
    needs: lint_unit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: cd packages/renderx-mono-repo && pnpm install
      
      - name: Build for E2E
        run: cd packages/renderx-mono-repo && pnpm run build
      
      - name: Start dev server
        run: cd packages/renderx-mono-repo && pnpm run dev &
        env:
          CI: true
      
      - name: Wait for server
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:4173 > /dev/null 2>&1; then
              echo "Server is ready"
              exit 0
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          echo "Server failed to start"
          exit 1
      
      - name: Run Cypress E2E tests
        run: cd packages/renderx-mono-repo && pnpm run test:e2e
        env:
          CI: true
      
      - name: Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-artifacts
          path: packages/renderx-mono-repo/cypress/artifacts
          retention-days: 7
      
      - name: Upload E2E videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: packages/renderx-mono-repo/cypress/videos
          retention-days: 7

  precheck:
    name: CI Precheck
    runs-on: ubuntu-latest
    needs: lint_unit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: cd packages/renderx-mono-repo && pnpm install
      
      - name: Run CI precheck
        run: cd packages/renderx-mono-repo && node scripts/ci-precheck.js
      
      - name: Validate ADF
        run: |
          cd packages/renderx-mono-repo
          if [ -f renderx-adf.json ]; then
            echo "✅ renderx-adf.json exists"
            cat renderx-adf.json | jq . > /dev/null && echo "✅ Valid JSON"
          else
            echo "❌ renderx-adf.json not found"
            exit 1
          fi

  docker_build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint_unit, e2e_cypress, precheck]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/renderx-mono-repo
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./packages/renderx-mono-repo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  quality_gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint_unit, e2e_cypress, precheck, docker_build]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          if [ "${{ needs.lint_unit.result }}" != "success" ]; then
            echo "❌ Lint & Unit Tests failed"
            exit 1
          fi
          if [ "${{ needs.e2e_cypress.result }}" != "success" ]; then
            echo "❌ E2E Tests failed"
            exit 1
          fi
          if [ "${{ needs.precheck.result }}" != "success" ]; then
            echo "❌ CI Precheck failed"
            exit 1
          fi
          if [ "${{ needs.docker_build.result }}" != "success" ] && [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ All quality gates passed"

