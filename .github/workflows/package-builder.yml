name: package-builder

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build-test-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ‚ñà Agent 1: PLAN
      # In a real implementation, this would call an LLM to generate a plan
      - name: LLM Plan
        run: |
          echo "ü§ñ Planner Agent"
          echo "In production, this would analyze feature requests and generate a plan"
          echo "For now, we'll use pre-implemented packages"

      # ‚ñà Agent 2: IMPLEMENT
      # In a real implementation, this would call an LLM to write code
      - name: Implement Feature (LLM)
        run: |
          echo "ü§ñ Implementer Agent"
          echo "In production, this would generate TypeScript code and tests"
          echo "For now, we'll test existing packages"

      # Build packages first (needed for guardrails)
      - name: Build Packages
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm run build --workspaces --if-present
          else
            echo "‚ö†Ô∏è  No packages to build"
          fi

      # Structure/guardrails quick pass
      - name: Guardrails Check
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm run guardrails -- --repo .
          else
            echo "‚ö†Ô∏è  No packages to validate"
          fi

      # ‚ñà Agent 3: TEST (unit)
      - name: Unit Tests
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm test --workspaces --if-present
          else
            echo "‚ö†Ô∏è  No packages to test"
          fi

      # ‚ñà Agent 3b: E2E (examples/host-app)
      - name: E2E Tests
        continue-on-error: true
        run: |
          if [ -f "playwright.config.ts" ]; then
            # Install host app dependencies
            cd examples/host-app && npm install && cd ../..
            # Install Playwright browsers
            npx playwright install --with-deps
            # Run E2E tests
            npm run e2e
          else
            echo "‚ö†Ô∏è  E2E tests not configured yet"
          fi

      # ‚ñà Agent 4: PACK
      - name: Build Package Tarballs
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm run pack-all -- --packages "packages/*"
          else
            echo "‚ö†Ô∏è  No packages to pack"
          fi

      # ‚ñà Agent 5: VERIFY as external dependency
      - name: External Install Smoke Test
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm run integration -- --packages "packages/*"
          else
            echo "‚ö†Ô∏è  No packages to verify"
          fi

      # Final report (comment on PR)
      - name: Generate Summary Report
        run: |
          if [ -d "packages" ] && [ "$(ls -A packages)" ]; then
            npm run report
          else
            echo "‚ö†Ô∏è  No packages to report on"
          fi

      # Upload artifacts for debugging
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: .artifacts/
          if-no-files-found: ignore

      # Comment on PR with results (optional)
      - name: Comment PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const packagesDir = 'packages';
            
            let comment = '## üì¶ Package Builder Report\n\n';
            
            if (!fs.existsSync(packagesDir) || fs.readdirSync(packagesDir).length === 0) {
              comment += '‚ö†Ô∏è No packages found in this PR.\n';
            } else {
              comment += '‚úÖ Pipeline completed. Check the workflow logs for details.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

